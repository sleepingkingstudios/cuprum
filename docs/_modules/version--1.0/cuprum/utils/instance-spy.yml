---
name: Cuprum::Utils::InstanceSpy
slug: instance-spy
type: module
files:
- lib/cuprum/utils/instance_spy.rb
parent_path: cuprum/utils
short_description: |-
  Utility module for instrumenting calls to the #call method of any instance
  of a command class. This can be used to unobtrusively test the
  functionality of code that calls a command without providing a reference to
  the command instance, such as chained commands or methods that create and
  call a command instance.
class_methods:
- name: clear_spies
  path: cuprum/utils/instance-spy/c-clear-spies
  slug: clear-spies
  inherited: false
- name: spy_on
  path: cuprum/utils/instance-spy/c-spy-on
  slug: spy-on
  inherited: false
defined_classes:
- name: Spy
  slug: spy
instance_methods:
- name: call
  path: cuprum/utils/instance-spy/i-call
  slug: call
  inherited: false
data_path: cuprum/utils/instance-spy
metadata:
  examples:
  - name: Observing calls to instances of a command.
    text: |-
      spy = Cuprum::Utils::InstanceSpy.spy_on(CustomCommand)

      expect(spy).to receive(:call).with(1, 2, 3, :four => '4')

      CustomCommand.new.call(1, 2, 3, :four => '4')
  - name: Observing calls to a chained command.
    text: |-
      spy = Cuprum::Utils::InstanceSpy.spy_on(ChainedCommand)

      expect(spy).to receive(:call)

      Cuprum::Command.new {}.
        chain { |result| ChainedCommand.new.call(result) }.
        call
  - name: Block syntax
    text: |-
      Cuprum::Utils::InstanceSpy.spy_on(CustomCommand) do |spy|
        expect(spy).to receive(:call)

        CustomCommand.new.call
      end
version: '1.0'
